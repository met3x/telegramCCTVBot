import cv2
import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()


# –ü–∞—Ä—Å–∏–º –∫–∞–º–µ—Ä—ã –∏–∑ .env
def load_cameras():
    cameras = {}
    for key, value in os.environ.items():
        if key.startswith("CAMERA_"):
            cam_id = key.split("_")[1]
            desc, source = value.split(", ")
            cameras[cam_id] = {"desc": desc, "source": source}
    return cameras


CAMERAS = load_cameras()
TOKEN = os.getenv("TOKEN")


async def get_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞–º–µ—Ä—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        camera_id = context.args[0] if context.args else "0"

        if camera_id not in CAMERAS:
            await update.message.reply_text(f"–ö–∞–º–µ—Ä–∞ {camera_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        cam = CAMERAS[camera_id]
        source = int(cam["source"]) if cam["source"].isdigit() else cam["source"]

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–∞–º–µ—Ä–µ
        cap = cv2.VideoCapture(source, cv2.CAP_GSTREAMER)
        if not cap.isOpened():
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–º–µ—Ä–µ {camera_id}.")
            return

        # –î–µ–ª–∞–µ–º —Å–Ω–∏–º–æ–∫
        ret, frame = cap.read()
        cap.release()

        if not ret:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        temp_file = f"camera_{camera_id}.jpg"
        cv2.imwrite(temp_file, frame)

        with open(temp_file, "rb") as photo:
            await update.message.reply_photo(photo, caption=f"üì∑ {cam['desc']}")

        os.remove(temp_file)

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")


async def list_cameras(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä"""
    response = "üìπ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–º–µ—Ä—ã:\n" + "\n".join(
        f"/get_image {id} - {data['desc']}"
        for id, data in CAMERAS.items()
    )
    await update.message.reply_text(response)


def main():
    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
    app = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("get_image", get_image))
    app.add_handler(CommandHandler("list_cameras", list_cameras))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()


if __name__ == "__main__":
    main()
