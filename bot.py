import cv2
import os
import subprocess
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from keyboards import get_cameras_keyboard
from access import *
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()


def load_allowed_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ access.conf"""
    with open("access.conf", "r") as file:
        return [line.strip() for line in file if line.strip() and not line.startswith("#")]


ALLOWED_USERS = load_allowed_users()


async def check_access(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö"""
    user_id = str(update.effective_user.id)
    if user_id not in ALLOWED_USERS:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return False
    return True


async def grant_access(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ access.conf (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    admin_id = "177324433"  # –í–∞—à ID
    if str(update.effective_user.id) != admin_id:
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    new_user_id = context.args[0] if context.args else None
    if not new_user_id or not new_user_id.isdigit():
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant_access <ID>")
        return

    with open("access.conf", "a") as file:
        file.write(f"\n{new_user_id}")

    global ALLOWED_USERS
    ALLOWED_USERS = load_allowed_users()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user_id} –¥–æ–±–∞–≤–ª–µ–Ω.")


# –ü–∞—Ä—Å–∏–º –∫–∞–º–µ—Ä—ã –∏–∑ .env
def load_cameras():
    cameras = {}
    for key, value in os.environ.items():
        if key.startswith("CAMERA_"):
            cam_id = key.split("_")[1]
            desc, source = value.split(", ")
            cameras[cam_id] = {"desc": desc, "source": source}
    return cameras


CAMERAS = load_cameras()
TOKEN = os.getenv("TOKEN")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update):
        return

    keyboard = get_cameras_keyboard(CAMERAS)
    await update.message.reply_text("üì° –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–µ—Ä—É:", reply_markup=keyboard)


async def handle_camera_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞–º–µ—Ä—ã"""
    # if not await check_access(update):
    #     return

    query = update.callback_query
    await query.answer()

    camera_id = query.data.split("_")[1]
    desc, source = CAMERAS[camera_id]


    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞–º–µ—Ä—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        camera_id = context.args[0] if context.args else "0"

        if camera_id not in CAMERAS:
            await update.message.reply_text(f"–ö–∞–º–µ—Ä–∞ {camera_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        temp_file = f"camera_{camera_id}.jpg"
        cam = CAMERAS[camera_id]

        # –ó–∞—Ö–≤–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await query.edit_message_text(f"üîÑ –ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é {cam['desc']}...")

        source = int(cam["source"]) if cam["source"].isdigit() else cam["source"]
        ffmpeg_cmd = [
            "ffmpeg",
            "-loglevel", "error",
            "-rtsp_transport", "tcp",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º TCP –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            "-skip_frame", "nokey",  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–ª—é—á–µ–≤—ã–µ –∫–∞–¥—Ä—ã
            "-i", source,
            "-frames:v", "1",  # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ 1 –∫–∞–¥—Ä
            "-q:v", "2",  # –ö–∞—á–µ—Å—Ç–≤–æ JPEG (1-31, –≥–¥–µ 2 ‚Äî –ª—É—á—à–µ–µ)
            # "-c:v", "libx265",  # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ HEVC
            "-y",  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            temp_file
        ]
        try:
            subprocess.run(ffmpeg_cmd, check=True)
        except subprocess.CalledProcessError as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ FFmpeg: {e}")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ Telegram
        with open(temp_file, "rb") as photo:
            await context.bot.send_photo(chat_id=query.message.chat_id, photo=temp_file, caption=f"üì∑ {cam['desc']}")
            # await update.message.reply_photo(photo, caption=f"üì∑ {cam['desc']}")

        os.remove(temp_file)

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")


async def list_cameras(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä"""
    response = "üìπ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–º–µ—Ä—ã:\n" + "\n".join(
        f"/get_image {id} - {data['desc']}"
        for id, data in CAMERAS.items()
    )
    await update.message.reply_text(response)


def main():
    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
    app = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_camera_selection, pattern="^camera_"))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    # app.add_handler(CommandHandler("get_image", get_image))
    app.add_handler(CommandHandler("list_cameras", list_cameras))
    app.add_handler(CommandHandler("grant_access", grant_access))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()


if __name__ == "__main__":
    main()
